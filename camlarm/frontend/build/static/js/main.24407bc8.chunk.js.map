{"version":3,"sources":["ducks/mocks.js","i18n/index.js","notifications/Notifier.jsx","notifications/withNotifications.js","notifications/DismissButton.jsx","ducks/detection/selectors.js","pages/DetectionsPage.jsx","ducks/detection/actions.js","pages/HomePage.jsx","App.jsx","index.jsx","config/production.js","config/base.js","config/index.js","ducks/notifications/actions.js","ducks/notifications/reducers.js","ducks/notifications/selectors.js","ducks/detection/types.js","ducks/reducers.js","ducks/store.js","ducks/axios.js","ducks/interceptors.js","ducks/middlewares.js"],"names":["translations","en","it","connect","state","notifications","dispatch","bindActionCreators","removeSnackbar","withSnackbar","enqueueSnackbar","useState","displayed","setDisplayed","forEach","notification","setTimeout","key","indexOf","message","anchorOrigin","vertical","horizontal","options","compose","withHandlers","ok","variant","ko","useStyles","makeStyles","icon","color","DismissButton","onClick","classes","IconButton","size","className","getDetectionsQuery","getQuerySelector","type","Types","defaultData","detections","createSelector","data","detectionsLoading","loading","useEnhancer","useDispatch","useEffect","types","request","url","method","useSelector","DetectionsPage","LinearProgress","map","timestamp","photo_url","Card","CardContent","Typography","moment","format","src","config","apiBaseUrl","HomePage","location","useLocation","JSON","stringify","initLocalStorageFn","localStorage","setItem","theme","createMuiTheme","notistackRef","React","createRef","onClickDismiss","current","closeSnackbar","App","htmlElement","history","mocks","initializeLocalStorageFn","RouterInstance","appEnv","Router","HashRouter","apiMock","store","configureStore","ThemeProvider","locale","messages","ref","action","path","component","to","DOM_MOUNT_NODE","document","getElementById","render","Object","freeze","require","default","INITIAL_STATE","filter","GET_DETECTIONS","notificationReducer","logger","createLogger","preloadedState","overriddenMocks","defaultMocks","handleRequests","interceptors","driver","includes","Boolean","createMockDriver","timeout","mockTimeout","createAxiosDriver","axiosInstance","cache","requestsReducer","requestsMiddleware","middlewares","changeCaseMiddleware","push","middlewareEnhancer","applyMiddleware","enhancers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","composedEnhancers","createStore","combineReducers","rootReducer","requests","module","hot","accept","replaceReducer","axios","create","baseURL","response","use","headers","authorization","token","onAbortSaga","onRequest","onSuccess","meta","serialize","deserialize","transformKeys","onError","error","console","log","status","toString","match","href","onAbort","changeCaseOn","changeCaseTo","obj","newObject","Array","isArray","prop","changeCase","defaultOptions","_","next","noChangeCase","newData","set"],"mappings":"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","file":"static/js/main.24407bc8.chunk.js","sourcesContent":["import * as types from \"./types\";\n\nconst axiosWrapper = jsonApiData => ({ data: { ...jsonApiData } });\n\nexport default {};\n","/* eslint-disable import/prefer-default-export */\nimport en from \"./translations/en.json\";\nimport it from \"./translations/it.json\";\n\nexport const translations = { en, it };\n","import { useState } from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { withSnackbar } from \"notistack\";\nimport { removeSnackbar, notifications } from \"../ducks/notifications\";\n\nconst Notifier = ({ notifications, enqueueSnackbar, removeSnackbar }) => {\n  const [displayed, setDisplayed] = useState([]);\n\n  const storeDisplayed = key => {\n    setDisplayed([...displayed, key]);\n  };\n\n  notifications.forEach(notification => {\n    setTimeout(() => {\n      // If notification already displayed, abort\n      if (displayed.indexOf(notification.key) > -1) return;\n      // Display notification using notistack\n      enqueueSnackbar(notification.message, {\n        ...{\n          anchorOrigin: {\n            vertical: \"bottom\",\n            horizontal: \"center\"\n          },\n          ...notification.options\n        }\n      });\n      // Add notification's key to the local state\n      storeDisplayed(notification.key);\n      if (notification.key) {\n        removeSnackbar(notification.key);\n      }\n    }, 1);\n  });\n\n  return null;\n};\n\nconst mapStateToProps = state => ({\n  notifications: notifications(state)\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({ removeSnackbar }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(Notifier));\n","/* eslint-disable no-shadow */\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { compose, withHandlers } from \"recompose\";\nimport { enqueueSnackbar } from \"../ducks/notifications\";\n\nconst enhance = compose(\n  connect(null, dispatch => bindActionCreators({ enqueueSnackbar }, dispatch)),\n  withHandlers({\n    ok: ({ enqueueSnackbar }) => message =>\n      enqueueSnackbar({\n        message,\n        options: {\n          variant: \"success\"\n        }\n      }),\n    ko: ({ enqueueSnackbar }) => message =>\n      enqueueSnackbar({\n        message,\n        options: {\n          variant: \"error\"\n        }\n      })\n  })\n);\n\nexport default enhance;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { IconButton, makeStyles } from \"@material-ui/core\";\nimport Clear from \"@material-ui/icons/Clear\";\n\nconst useStyles = makeStyles({\n  icon: {\n    color: \"white\"\n  }\n});\n\nconst DismissButton = ({ onClick }) => {\n  const classes = useStyles();\n  return (\n    <IconButton size=\"small\" onClick={onClick} className={classes.icon}>\n      <Clear />\n    </IconButton>\n  );\n};\n\nDismissButton.propTypes = {\n  onClick: PropTypes.func.isRequired\n};\n\nexport default DismissButton;\n","/* eslint-disable import/prefer-default-export */\nimport { getQuerySelector } from \"@redux-requests/core\";\nimport { createSelector } from \"reselect\";\n\nimport * as Types from \"./types\";\n\nconst getDetectionsQuery = getQuerySelector({\n  type: Types.GET_DETECTIONS,\n  defaultData: []\n});\n\nexport const detections = createSelector(getDetectionsQuery, ({ data }) => data);\nexport const detectionsLoading = createSelector(getDetectionsQuery, ({ loading }) => loading);\n","import React, { useEffect } from \"react\";\nimport moment from \"moment\";\nimport { LinearProgress, Card, CardContent, Typography } from \"@material-ui/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { detections, detectionsLoading } from \"../ducks/selectors\";\nimport { getDetections } from \"../ducks/actions\";\nimport config from \"../config\";\n\nconst useEnhancer = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getDetections());\n  }, [dispatch]);\n\n  return {\n    detections: useSelector(detections),\n    detectionsLoading: useSelector(detectionsLoading)\n  };\n};\n\nconst DetectionsPage = () => {\n  const { detections, detectionsLoading } = useEnhancer();\n  if (detectionsLoading) return <LinearProgress />;\n  return detections.map(({ timestamp, photo_url }) => (\n    <Card>\n      <CardContent>\n        <Typography>{moment(timestamp).format()}</Typography>\n        <img src={`${config.apiBaseUrl}/web${photo_url}`} />\n      </CardContent>\n    </Card>\n  ));\n};\n\nexport default DetectionsPage;\n","/* eslint-disable import/prefer-default-export */\nimport * as types from \"./types\";\n\nexport const getDetections = () => ({\n  type: types.GET_DETECTIONS,\n  request: {\n    url: \"/web/\",\n    method: \"GET\"\n  }\n});\n","import React from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nconst HomePage = () => {\n  const location = useLocation();\n  return <pre>{JSON.stringify(location, null, 2)}</pre>;\n};\n\nexport default HomePage;\n","/* eslint-disable react/prop-types */\nimport React from \"react\";\nimport { Provider as ReduxProvider } from \"react-redux\";\nimport { IntlProvider } from \"react-intl\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core\";\nimport { SnackbarProvider } from \"notistack\";\nimport { Router, HashRouter, Switch, Redirect, Route } from \"react-router-dom\";\nimport { configureStore } from \"./ducks\";\nimport { translations } from \"./i18n\";\nimport { DismissButton, Notifier } from \"./notifications\";\nimport config from \"./config\";\nimport { DetectionsPage, HomePage } from \"./pages\";\n\nconst initLocalStorageFn = () => {\n  localStorage.setItem(\"CAMLARM_AUTH_TOKEN\", \"Test Token (not usable for production)\");\n};\n\nconst overriddenTheme = {};\n\nconst theme = createMuiTheme(overriddenTheme);\n\nconst language = \"it\";\n\nconst notistackRef = React.createRef();\nconst onClickDismiss = key => () => {\n  notistackRef.current.closeSnackbar(key);\n};\n\nfunction App({ history, mocks, initializeLocalStorageFn = initLocalStorageFn }) {\n  const RouterInstance = config.appEnv === \"test\" ? Router : HashRouter;\n  if (config.appEnv === \"test\" || (config.appEnv === \"dev\" && config.apiMock))\n    initializeLocalStorageFn();\n  const store = configureStore({}, mocks);\n  return (\n    <ThemeProvider theme={theme}>\n      <ReduxProvider store={store}>\n        <IntlProvider locale={language} key={language} messages={translations[language]}>\n          <SnackbarProvider\n            ref={notistackRef}\n            action={key => <DismissButton onClick={onClickDismiss(key)} />}\n          >\n            <RouterInstance history={history}>\n              <Switch>\n                <Route path=\"/detections\" component={DetectionsPage} />\n                <Route path=\"/\" component={HomePage} />\n                <Redirect to=\"/\" />\n              </Switch>\n              <Notifier />\n            </RouterInstance>\n          </SnackbarProvider>\n        </IntlProvider>\n      </ReduxProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\n\nconst DOM_MOUNT_NODE = document.getElementById(\"root\");\n\nconst renderApp = htmlElement => render(<App />, htmlElement);\n\nif (process.env.NODE_ENV !== \"production\" && module.hot) {\n  module.hot.accept([\"./i18n\", \"./App\"], () => renderApp(DOM_MOUNT_NODE));\n}\n\nrenderApp(DOM_MOUNT_NODE);\n","import baseConfig from \"./base\";\n\nconst config = {\n  appEnv: \"dist\",\n  apiBaseUrl: \"http://0.0.0.0:8080\"\n};\n\nexport default Object.freeze({ ...baseConfig, ...config });\n","export default {};\n","/* eslint-disable import/no-dynamic-require */\nconst config = require(`./${process.env.REACT_APP_STAGE}`).default;\n\nexport default config;\n","import moment from \"moment\";\n\nexport const enqueueSnackbar = notification => ({\n  type: \"ENQUEUE_SNACKBAR\",\n  notification: {\n    key: moment().format(\"x\"),\n    ...notification\n  }\n});\n\nexport const removeSnackbar = key => ({\n  type: \"REMOVE_SNACKBAR\",\n  key\n});\n","const INITIAL_STATE = [];\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case \"ENQUEUE_SNACKBAR\":\n      return [...state, action.notification];\n\n    case \"REMOVE_SNACKBAR\":\n      return state.filter(notification => notification.key !== action.key);\n\n    default:\n      return state;\n  }\n};\n","/* eslint-disable import/prefer-default-export */\nexport const notifications = state => state.notifications;\n","/* eslint-disable import/prefer-default-export */\nexport const GET_DETECTIONS = \"GET_DETECTIONS\";\n","import { reducer as notificationReducer } from \"./notifications\";\n\nexport default {\n  notifications: notificationReducer\n};\n","/* eslint-disable import/no-extraneous-dependencies */\nimport { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport { handleRequests } from \"@redux-requests/core\";\nimport { createDriver as createMockDriver } from \"@redux-requests/mock\";\nimport { createDriver as createAxiosDriver } from \"@redux-requests/axios\";\nimport rootReducer from \"./reducers\";\nimport config from \"../config\";\nimport axiosInstance from \"./axios\";\nimport interceptors from \"./interceptors\";\nimport { changeCaseMiddleware } from \"./middlewares\";\nimport defaultMocks from \"./mocks\";\n\nexport const INITIAL_STATE = {};\n\nconst logger = createLogger();\n\nexport const configureStore = (preloadedState = INITIAL_STATE, overriddenMocks) => {\n  const mocks = { ...defaultMocks, ...overriddenMocks };\n  const { requestsReducer, requestsMiddleware } = handleRequests({\n    ...interceptors,\n    driver:\n      [\"dev\", \"test\"].includes(config.appEnv) && Boolean(config.apiMock)\n        ? createMockDriver(mocks, {\n            timeout: config.mockTimeout\n          })\n        : createAxiosDriver(axiosInstance),\n    cache: true\n  });\n\n  const middlewares = [changeCaseMiddleware(), ...requestsMiddleware];\n  if (config.appEnv === \"dev\") {\n    middlewares.push(logger);\n  }\n\n  const middlewareEnhancer = applyMiddleware(...middlewares);\n\n  const enhancers = [middlewareEnhancer];\n\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n  const composedEnhancers = composeEnhancers(...enhancers);\n\n  const store = createStore(\n    combineReducers({ ...rootReducer, requests: requestsReducer }),\n    preloadedState,\n    composedEnhancers\n  );\n\n  if (config.appEnv !== \"dist\" && module.hot) {\n    module.hot.accept(\"./reducers\", () => store.replaceReducer(rootReducer));\n  }\n\n  return store;\n};\n","import axios from \"axios\";\nimport config from \"../config\";\n\nconst axiosInstance = axios.create({ baseURL: config.apiBaseUrl });\n\naxiosInstance.interceptors.response.use(response => {\n  if (!response.headers.authorization) {\n    return response;\n  }\n  return {\n    ...response,\n    data: { ...response.data, token: response.headers.authorization }\n  };\n});\n\nexport default axiosInstance;\n","import { deserialize } from \"deserialize-json-api\";\n\nfunction onRequestSaga(request, action) {\n  request.headers = {\n    ...request.headers\n    // authorization: localStorage.getItem(\"CAMLARM_AUTH_TOKEN\")\n  };\n  return request;\n}\n\nfunction onSuccessSaga(response, action) {\n  if (action.meta && action.meta.serialize) {\n    return { ...response, data: deserialize(response.data, { transformKeys: \"camelCase\" }) };\n  }\n  return response;\n}\n\nfunction onErrorSaga(error) {\n  // do sth here, like dispatch some action\n  console.log(\"ERROR\", error);\n  if (\n    (error && error.response && error.response.status === 401) ||\n    error.toString().match(/network error/i)\n  ) {\n    window.location.href = \"/\";\n  }\n\n  throw error;\n}\n\nfunction* onAbortSaga() {\n  // do sth, for example an action dispatch\n}\n\nexport default {\n  onRequest: onRequestSaga,\n  onSuccess: onSuccessSaga,\n  onError: onErrorSaga,\n  onAbort: onAbortSaga\n};\n","/* eslint-disable import/prefer-default-export */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-unused-vars */\nimport * as changeCase from \"change-case\";\nimport { set } from \"lodash\";\n\nconst changeCaseOn = (changeCaseTo, obj) => {\n  const newObject = Array.isArray(obj) ? [] : {};\n\n  for (const prop in obj) {\n    if (typeof obj[prop] === \"object\" && obj[prop] !== null) {\n      newObject[changeCase[changeCaseTo](prop)] = changeCaseOn(changeCaseTo, obj[prop]);\n    } else {\n      newObject[changeCase[changeCaseTo](prop)] = obj[prop];\n    }\n  }\n  return newObject;\n};\n\nconst defaultOptions = {\n  /** expects `change-case` npm package method name, default `snakeCase` */\n  changeCaseTo: \"snakeCase\"\n};\n\nexport const changeCaseMiddleware = (options = defaultOptions) => _ => next => action => {\n  // Treat @redux-requests actions only\n  if (action.request && action.request.data && !action.meta.noChangeCase) {\n    const newData = changeCaseOn(options.changeCaseTo, action.request.data);\n\n    return next(set(action, \"request.data\", newData));\n  }\n\n  return next(action);\n};\n"],"sourceRoot":""}